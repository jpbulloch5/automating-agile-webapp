# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- dev

resources:
- repo: self

variables:
  orm_version: 'latest'

stages:
- stage: Release
  displayName: Build, test, and deploy the new release
  jobs:
  - job: Release
    displayName: Build, test, and deploy the new release
    pool:
      vmImage: ubuntu-latest
    steps:

    - task: Docker@2
      inputs:
        containerRegistry: 'Jacob''s Docker Hub'
        repository: 'jpbulloch5/revature_p1_webapp'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: '$(orm_version)'
        arguments: '--build-arg orm_version=$(orm_version)'
      displayName: Build WebApp in container

    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Jacob''s Docker Hub'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Run a Docker Compose command'
        dockerComposeCommand: 'up'
        arguments: '-d'
      displayName: Start the Dockerized application network

    
    - task: CmdLine@2
      inputs:
        script: 'docker exec airline_terminal ls $(System.DefaultWorkingDirectory)'
        failOnStderr: true
      displayName: check the resources directory

    - task: CmdLine@2
      inputs:
        script: 'docker cp airline_terminal:/app/web/P1_Local_Postman_Collection.json ./local_test.json'
        failOnStderr: true
      displayName: fetch test from container


    - task: NewmanPostman@4
      inputs:
        collectionSourceType: 'file'
        Contents: '**/local_test.json'
        environmentSourceType: 'none'
        bail: true
        reporters: 'junit'
      displayName: run the dev-defined system test using Newman Postman

    - task: Docker@2
      inputs:
        containerRegistry: 'Jacob''s Docker Hub'
        repository: 'jpbulloch5/revature_p1_webapp'
        command: 'push'
        tags: '$(orm_version)'
      displayName: Push WebApp image to DockerHub
    
    - task: CmdLine@2
      inputs:
        script: 'docker cp airline_terminal:/app/web/docker-compose.yml $(Build.ArtifactStagingDirectory)/airline_terminal_compose.yml'
        failOnStderr: true
      displayName: Fetch the docker compose file from the container

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'airline_terminal_compose.yml'
        publishLocation: 'Container'
      displayName: Publish the docker compose file as an artifact
    
    - task: CopyFilesOverSSH@0
      inputs:
        sshEndpoint: 'Revature VM3'
        sourceFolder: '$(Build.ArtifactStagingDirectory)'
        contents: 'airline_terminal_compose.yml'
        targetFolder: '/home/jacob/p1'
        readyTimeout: '20000'
      displayName: Send new docker-compose file to VM3
    
    - task: SSH@0
      inputs:
        sshEndpoint: 'Revature VM3'
        runOptions: 'commands'
        commands: sudo docker-compose -f /home/jacob/p1/airline_terminal_compose.yml up -d --force-recreate
        failOnStdErr: false
        readyTimeout: '20000'
      displayName: Start the docker container on the host
    - task: SSH@0
      inputs:
        sshEndpoint: 'Revature VM3'
        runOptions: 'commands'
        commands: sudo docker system prune -a -f
        failOnStdErr: false
        readyTimeout: '20000'
      displayName: Prune out-dated docker resources
      
    # - task: SSH@0
    #   inputs:
    #     sshEndpoint: 'Revature VM3'
    #     runOptions: 'commands'
    #     commands: |
    #       sudo docker exec airline_postgres_db createdb airline_db
    #       sudo docker exec airline_postgres_db psql postgres=# CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; \q
    #       sudo docker exec airline_postgres_db psql postgres=# DROP TABLE IF EXISTS customer CASCADE; \q
    #       sudo docker exec airline_postgres_db psql postgres=# CREATE TABLE customer(customer_id uuid NOT NULL,firstname VARCHAR NOT NULL, lastname VARCHAR NOT NULL, customerNum VARCHAR NOT NULL, PRIMARY KEY (customer_id)); \q
    #       sudo docker exec airline_postgres_db psql postgres=# INSERT INTO customer(customer_id, firstname, lastname, customerNum) VALUES('a3b3f5a0-d04f-11eb-aad1-0242ac170001', 'first1', 'last1', 1), ('a3b3fc8a-d04f-11eb-aad1-0242ac170002', 'first2', 'last2', 2); \q
    #       sudo docker exec airline_postgres_db psql postgres=# SELECT * FROM customer; \q
    #       sudo docker exec airline_postgres_db psql postgres=# DROP TABLE IF EXISTS flight CASCADE; \q
    #       sudo docker exec airline_postgres_db psql postgres=# CREATE TABLE flight(flight_id uuid NOT NULL, flightNum INT NOT NULL, departureLocation VARCHAR NOT NULL, destinationLocation VARCHAR NOT NULL, departureTime VARCHAR NOT NULL, departureGate VARCHAR NOT NULL, destinationGate VARCHAR NOT NULL, PRIMARY KEY (flight_id)); \q
    #       sudo docker exec airline_postgres_db psql postgres=# INSERT INTO flight (flight_id, flightNum, departureLocation, destinationLocation, departureTime, departureGate, destinationGate) VALUES ('a3b3f5a0-d04f-11eb-aad1-0242ac170001', 1, 'dep1', 'dest1', 'depTime1', 'depGate1', 'destGate1'), ('a3b3fc8a-d04f-11eb-aad1-0242ac170002', 2, 'dep2', 'dest2', 'depTime2', 'depGate2', 'destGate2'); \q
    #       sudo docker exec airline_postgres_db psql postgres=# SELECT * FROM flight; \q
    #       sudo docker exec airline_postgres_db psql postgres=# DROP TABLE IF EXISTS ticket CASCADE; \q
    #       sudo docker exec airline_postgres_db psql postgres=# CREATE TABLE ticket(ticket_id uuid NOT NULL, customer_id uuid NOT NULL, flight_id uuid NOT NULL, PRIMARY KEY (ticket_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id), FOREIGN KEY (flight_id) REFERENCES flight(flight_id)); \q
    #       sudo docker exec airline_postgres_db psql postgres=# INSERT INTO ticket (ticket_id, customer_id, flight_id) VALUES('a3b3f5a0-d04f-11eb-aad1-0242ac170001', 'a3b3f5a0-d04f-11eb-aad1-0242ac170001', 'a3b3f5a0-d04f-11eb-aad1-0242ac170001'), ('a3b3fc8a-d04f-11eb-aad1-0242ac170002', 'a3b3fc8a-d04f-11eb-aad1-0242ac170002', 'a3b3fc8a-d04f-11eb-aad1-0242ac170002'); \q
    #       sudo docker exec airline_postgres_db psql postgres=# SELECT ticket.ticket_id, customer.*, flight.* FROM ticket JOIN customer on ticket.customer_id = customer.customer_id JOIN flight on ticket.flight_id = flight.flight_id; \q
    #     readyTimeout: '20000'
    #   displayName: load DB with default values
      